#!groovy

// Part of https://github.com/VitexSoftware/BuildImages

String[] architectures = [] // 'amd64', 'aarch64', 'arm', 'i386'
String[] distributions = ['debian:buster', 'debian:bullseye', 'debian:bookworm', 'ubuntu:focal', 'ubuntu:jammy']

String vendor = 'vitexsoftware'
//String distroFamily = ''
String distroCodename = ''
String ver = ''

properties([
    copyArtifactPermission('*')
])

node {
    ansiColor('xterm') {
        stage('SCM Checkout') {
            checkout scm
            control = readFile(file:  env.WORKSPACE + '/debian/control')
            lines = control.readLines()
            for (line in lines) {
                if (line.trim()) {
                    def (key,value) = line.split(': ').collect { it.trim() }
                    if (key == 'Architecture') {
                        if (value == 'any') {
                            architectures = ['amd64', 'armhf', 'aarch64']
                        } else {
                            architectures = [value]
                        }
                    }
                }
            }
        }
    }
}

node {
    stage('Paraell Build for multiple Distros') {
        builds = [:]
        architectures.each { arch ->
            distributions.each { dist ->
                builds[dist] = {
                    def exists = fileExists arch + '_' + dist
                    if (!exists) {
                        new File(arch + '_' + dist).mkdir()
                    }
                    dir(arch + '_' + dist) {
                        stage('Checkout ' + arch + ' ' + dist) {
                            checkout scm
                            buildImage = docker.image(vendor + '/' + dist)
                            sh 'git checkout debian/changelog'
                            debVersion = sh(
                        script: 'dpkg-parsechangelog --show-field Version',
                        returnStdout: true
                    ).trim()
                            ver = debVersion + '~' + distroCodename + '~' + env.BUILD_NUMBER
                        }
                        stage('Build ' + arch + ' ' + dist) {
                            buildImage.inside {
                                sh 'dch -b -v ' + ver  + ' "' + env.BUILD_TAG  + '"'
                                sh 'sudo apt-get update --allow-releaseinfo-change'
                                sh 'sudo chown jenkins:jenkins ..'
                                sh 'debuild-pbuilder  -i -us -uc -b'
                                sh 'mkdir -p $WORKSPACE/dist/debian/ ; rm -rf $WORKSPACE/dist/debian/* ; for deb in $(cat debian/files | awk \'{print $1}\'); do mv "../$deb" $WORKSPACE/dist/debian/; done'
                            }
                        }
                        stage('Test ' + arch + ' ' + dist) {
                            buildImage.inside {
                                def debconfDebug = 0 //Set to "5" or "developer" to debug debconf
                                sh 'cd $WORKSPACE/dist/debian/ ; dpkg-scanpackages . /dev/null | gzip -9c > Packages.gz; cd $WORKSPACE'
                                sh 'echo "deb [trusted=yes] file://///$WORKSPACE/dist/debian/ ./" | sudo tee /etc/apt/sources.list.d/local.list'
                                sh 'sudo apt-get update --allow-releaseinfo-change'
                                sh 'echo "INSTALATION"'
                                sh 'IFS="\n\b"; for package in  `ls $WORKSPACE/dist/debian/ | grep .deb | grep -v dbgsym | awk -F_ \'{print \$1}\'` ; do  echo -e "${GREEN} installing ${package} on `lsb_release -sc` ${ENDCOLOR} " ; sudo  DEBIAN_FRONTEND=noninteractive DEBCONF_DEBUG=' + debconfDebug  + ' apt-get -y install $package ; echo "test now";  done;'
                                stash includes: 'dist/**', name: 'dist-' + distroCodename
                            }
                        }
                        stage('CleanUP ' + arch + ' ' + dist) {

                                new File(arch + '_' + dist).delete()

                        }
                    }
                }
            }
        }
        parallel builds
    }
}
